#version 150

// ============================================================
// PROBLEM  
// HALFLIFE SHADER ( fragment shader )
// ============================================================

// Input registers (from vertex shader)
	in	vec3 frg_position;         // fragment position in camera space
	in	vec3 frg_color;		   // fragment color in camera space
	in	vec3 frg_normal;	   // fragment normal in camera space
	in	vec3 frg_camera_pos;       // camera position in camera space
	in  vec3 frg_light_pos;        // light position in CAMERA space
	flat in int  requirements_met;     // are all requirements met ?

// Uniform registers
	uniform vec3  L_ambient;           // light ambient color
	uniform vec3  L_diffuse;           // diffuse light color
	uniform vec3  L_specular;          // specular light color
	uniform float L_exponent;          // specular exponent

// Output color
	out	vec4 result;               // RGBA output color for this fragment

void main(void) {
	if (requirements_met==0) {
		result = vec4(1.0,0.0 ,0.0,1.0);
		return;
	}

	// TODO: replace the below line by the Halflife light model as per assignment
	vec3 frg_lightdir_cam = normalize(frg_light_pos - frg_position);
	vec3 normal = normalize(frg_normal);
	
	float I = 0.5 * dot(normal, frg_lightdir_cam) + 0.5;
	
	result = vec4(frg_color * I, 1.0);
	// result = vec4(I, 1.0); // DEBUG: See if normals are transformed correctly
	// result = clamp(result, 0.0, 1.0f);
}
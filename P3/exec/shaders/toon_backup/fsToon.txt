#version 150

// ============================================================
// PROBLEM 5 
// TOON SHADER ( fragment shader )
// ============================================================

// Input registers (from vertex shader)
	in	vec3 frg_position;         // fragment position in camera space
	in	vec3 frg_color;		   // fragment color in camera space
	in	vec3 frg_normal;	   // fragment normal in camera space
	in	vec3 frg_camera_pos;       // camera position in camera space
	in      vec3 frg_light_pos;        // light position in CAMERA space
	flat in int  requirements_met;     // are all requirements met ?

// Uniform registers
	uniform vec3  L_ambient;           // light ambient color
	uniform vec3  L_diffuse;           // diffuse light color
	uniform vec3  L_specular;          // specular light color
	uniform float L_exponent;          // specular exponent

// Output color
	out	vec4 result;               // RGBA output color for this fragment

vec3 quantize(vec3 intensity, float levels){
	// intensity is always gonna be between 0 and 1
	// and we are going to th higher level
	intensity = intensity * levels; // expand the levels from 0-1 to 0-level
	intensity = ceil(intensity); // latch them to larger number
	intensity = intensity / levels; //scale em back
	return intensity;
}

vec3 quantize_down(vec3 intensity, float levels){
	// intensity is always gonna be between 0 and 1
	// and we are going to th higher level
	intensity = intensity * levels; // expand the levels from 0-1 to 0-level
	intensity = floor(intensity); // latch them to smaller number
	intensity = intensity / levels; //scale em back
	return intensity;
}

float quantize_f(float intensity, float levels){
	// intensity is always gonna be between 0 and 1
	// and we are going to th higher level
	intensity = intensity * levels; // expand the levels from 0-1 to 0-level
	intensity = ceil(intensity); // latch them to smaller number
	intensity = intensity / levels; //scale em back
	return intensity;
}


// normal vector
vec3 normal = normalize(frg_normal);


void main(void) {
	if (requirements_met==0) {
		result = vec4(1.0,0.0,0.0,1.0);
		return;
	}

	// the lighting direction
	vec3 frg_lightdir_cam = normalize(frg_light_pos - frg_position);

	// the viewing direction
	vec3 frg_viewdir_cam = normalize(frg_camera_pos - frg_position);



	// halfway vector
	vec3 frg_halfway_cam = normalize(frg_viewdir_cam + frg_lightdir_cam);

	// calculate angles
	float cos_theta = max(0, dot(normal, frg_lightdir_cam)); //this is not real cos_theta. But we dont need -ve values
	cos_theta = quantize_f(cos_theta, 3);
	// this is the only thing that changes for Blinn_Phong
	float cos_phi = max(0, dot(normal, frg_halfway_cam)); // also not strictly true
	cos_phi = quantize_f(cos_phi, 2);


	// calculate intensities
	vec3 I_ambient = L_ambient;

	vec3 I_diffuse = L_diffuse * cos_theta;
	// I_diffuse = quantize(I_diffuse, 3);

	vec3 I_specular = L_specular * pow(cos_phi, L_exponent);
	// I_specular = quantize(I_specular, 2);




	// vec3 resultant = vec3(cos_theta, 0.0, 0.0);
	// vec3 resultant = (I_ambient + I_diffuse + I_specular) * vec3(1.0, 1.0, 1.0); // white for toony effect
	vec3 resultant = (I_ambient + I_diffuse + I_specular) * frg_color; // real color

	// black silhouettes
	if(dot(frg_viewdir_cam, frg_normal) < 0.25) resultant = vec3(0.0, 0.0, 0.0); 

	result = vec4(resultant, 1.0);
}
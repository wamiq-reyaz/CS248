#version 150

// ============================================================
// PROBLEM 3 
// FRAGMENT PHONG SHADER ( vertex shader )
// ============================================================

// Input registers
	in      vec3 vtx_position;
	in      vec3 vtx_color;
	in      vec3 vtx_normal;
	
// Uniform registers
	uniform mat4 Model;                // model matrix
	uniform mat4 View;                 // view matrix
	uniform mat4 Projection;           // projection matrix
	uniform mat4 inv_Model;            // inverse model matrix
	uniform mat4 inv_View;             // inverse view matrix
	uniform mat4 inv_Projection;       // inverse projection matrix
	uniform bool has_position;         // true iff position available
	uniform bool has_color;            // true iff color available
	uniform bool has_normal;           // true iff normal available	
	uniform vec3 L_position;           // light position in WORLD space

// Output registers
	out	vec3 frg_position;         // fragment position in camera space
	out	vec3 frg_color;		   // fragment color in camera space
	out	vec3 frg_normal;	   // fragment normal in camera space
	out	vec3 frg_camera_pos;       // camera position in camera space
	out	vec3 frg_light_pos;        // light position in CAMERA space
	flat out int requirements_met;     // are all requirements met ?

void main(void) {
	requirements_met = (has_position && has_normal) ? 1 : 0;
	if (has_color) frg_color = vtx_color;
	else           frg_color = vec3(1.0,1.0,1.0);

	// frequently reused components
	mat4 MV = View * Model;
	mat4 invMV = transpose(inv_Model*inv_View); // (AB)^T = B^T A^T


	// TODO: compute frg_position (position in camera space)
	frg_position = (MV * vec4(vtx_position, 1.0)).xyz;

	//       compute frg_normal (unit normal in camera space)
	frg_normal = (invMV * vec4(vtx_normal, 1.0)).xyz;

	//       compute frg_camera_pos (camera position in camera space)
	frg_camera_pos = vec3(0.0, 0.0, 0.0);
	
	//       compute frg_light_pos (light position in camera space)
	frg_light_pos = (View*vec4(0.0, 5.0, 5.0, 1.0)).xyz; // DEBUG: Light at known postion in view space
	// frg_light_pos = (View*vec4(L_position, 1.0)).xyz:

	gl_Position = Projection*View*Model*vec4(vtx_position.xyz,1.0f);
}